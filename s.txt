CompUnit → [ CompUnit ] ( Decl | FuncDef )
Decl → ConstDecl | VarDecl
ConstDecl → 'const' BType ConstDef { ',' ConstDef } ';'
BType → 'int' | 'float'
ConstDef → Ident { '[' ConstExp ']' } '=' ConstInitVal
ConstInitVal → ConstExp | '{' [ ConstInitVal { ',' ConstInitVal } ] '}'
VarDecl → BType VarDef { ',' VarDef } ';'
VarDef → Ident { '[' ConstExp ']' } | Ident { '[' ConstExp ']' } '=' InitVal
InitVal → Exp | '{' [ InitVal { ',' InitVal } ] '}'
FuncDef → FuncType Ident '(' [FuncFParams] ')' Block
FuncType → 'void' | 'int' | 'float'
FuncFParams → FuncFParam { ',' FuncFParam }
FuncFParam → BType Ident ['[' ']' { '[' Exp ']' }]
Block → '{' { BlockItem } '}'
BlockItem → Decl | Stmt
Stmt → LVal '=' Exp ';' | [Exp] ';' | Block | 'if' '(' Cond ')' Stmt [ 'else' Stmt ] | 'while' '(' Cond ')' Stmt | 'break' ';' | 'continue' ';' | 'return' [Exp] ';'
Exp → AddExp
Cond → LOrExp
LVal → Ident {'[' Exp ']'}
PrimaryExp → '(' Exp ')' | LVal | Number
Number → IntConst | FloatConst
UnaryExp → PrimaryExp | Ident '(' [FuncRParams] ')' | UnaryOp UnaryExp
UnaryOp → '+' | '−' | '!'
FuncRParams → Exp { ',' Exp }
MulExp → UnaryExp | MulExp ('*' | '/' | '%') UnaryExp
AddExp → MulExp | AddExp ('+' | '−') MulExp
RelExp → AddExp | RelExp ('<' | '>' | '<=' | '>=') AddExp
EqExp → RelExp | EqExp ('==' | '!=') RelExp
LAndExp → EqExp | LAndExp '&&' EqExp
LOrExp → LAndExp | LOrExp '||' LAndExp
ConstExp → AddExp


CompUnit → [ CompUnit' ] ;
CompUnit' → Decl | FuncDef ;
Decl → ConstDecl | VarDecl ;
ConstDecl → 'const' BType ConstDef { ',' ConstDef } ';' ;
BType → 'int' | 'float' ;
ConstDef → Ident { '[' ConstExp ']' } '=' ConstInitVal ;
ConstInitVal → ConstExp | '{' [ ConstInitVal { ',' ConstInitVal } ] '}' ;
VarDecl → BType VarDef { ',' VarDef } ';' ;
VarDef → Ident { '[' ConstExp ']' } [ '=' InitVal ] ;
InitVal → Exp | '{' [ InitVal { ',' InitVal } ] '}' ;
FuncDef → FuncType Ident '(' [FuncFParams] ')' Block ;
FuncType → 'void' | 'int' | 'float' ;
FuncFParams → FuncFParam { ',' FuncFParam } ;
FuncFParam → BType Ident ['[' ']' { '[' Exp ']' }] ;
Block → '{' { BlockItem } '}' ;
BlockItem → Decl | Stmt ;
Stmt → LVal '=' Exp ';' | [Exp] ';' | Block | 'if' '(' Cond ')' Stmt [ 'else' Stmt ] | 'while' '(' Cond ')' Stmt | 'break' ';' | 'continue' ';' | 'return' [Exp] ';' ;
Exp → AddExp ;
Cond → LOrExp ;
LVal → Ident {'[' Exp ']'} ;
PrimaryExp → '(' Exp ')' | LVal | Number ;
Number → IntConst | floatConst ;
UnaryExp → PrimaryExp | Ident '(' [FuncRParams] ')' | UnaryOp UnaryExp ;
UnaryOp → '+' | '−' | '!' ;
FuncRParams → Exp { ',' Exp } ;
MulExp → UnaryExp MulExp' ;
MulExp' → ('*' | '/' | '%') UnaryExp MulExp' | ε ;
AddExp → MulExp AddExp' ;
AddExp' → ('+' | '−') MulExp AddExp' | ε ;
RelExp → AddExp RelExp' ;
RelExp' → ('<' | '>' | '<=' | '>=') AddExp RelExp' | ε ;
EqExp → RelExp EqExp' ;
EqExp' → ('==' | '!=') RelExp EqExp' | ε ;
LAndExp → EqExp LAndExp' ;
LAndExp' → '&&' EqExp LAndExp' | ε ;
LOrExp → LAndExp LOrExp' ;
LOrExp' → '||' LAndExp LOrExp' | ε ;
ConstExp → AddExp ;


CompUnit → CompUnit' ;
CompUnit' → Decl CompUnit' | FuncDef CompUnit' | ε ;
Decl → ConstDecl | VarDecl ;
ConstDecl → 'const' BType ConstDef ConstDefList ';' ;
BType → 'int' | 'float' ;
ConstDef → Ident ConstExpList '=' ConstInitVal ;
ConstDefList → ',' ConstDef ConstDefList | ε ;
ConstExpList → '[' ConstExp ']' ConstExpList | ε ;
ConstInitVal → ConstExp | '{' ConstInitValList '}' ;
ConstInitValList → ConstInitVal ConstInitValListTail | ε ;
ConstInitValListTail → ',' ConstInitVal ConstInitValListTail | ε ;
VarDecl → BType VarDef VarDefList ';' ;
VarDef → Ident ConstExpList OptionalInitVal ;
VarDefList → ',' VarDef VarDefList | ε ;
OptionalInitVal → '=' InitVal | ε ;
InitVal → Exp | '{' InitValList '}' ;
InitValList → InitVal InitValListTail | ε ;
InitValListTail → ',' InitVal InitValListTail | ε ;
FuncDef → FuncType Ident '(' OptionalFuncFParams ')' Block ;
FuncType → 'void' | 'int' | 'float' ;
OptionalFuncFParams → FuncFParams | ε ;
FuncFParams → FuncFParam FuncFParamList ;
FuncFParamList → ',' FuncFParam FuncFParamList | ε ;
FuncFParam → BType Ident OptionalBracketExpList ;
OptionalBracketExpList → '[' ']' BracketExpList | ε ;
BracketExpList → '[' Exp ']' BracketExpList | ε ;
Block → '{' BlockItemList '}' ;
BlockItemList → BlockItem BlockItemList | ε ;
BlockItem → Decl | Stmt ;
Stmt → LVal '=' Exp ';' | OptionalExp ';' | Block | 'if' '(' Cond ')' Stmt OptionalElse | 'while' '(' Cond ')' Stmt | 'break' ';' | 'continue' ';' | 'return' OptionalExp ';' ;
OptionalExp → Exp | ε ;
OptionalElse → 'else' Stmt | ε ;
Exp → AddExp ;
Cond → LOrExp ;
LVal → Ident ExpList ;
ExpList → '[' Exp ']' ExpList | ε ;
PrimaryExp → '(' Exp ')' | LVal | Number ;
Number → IntConst | floatConst ;
UnaryExp → PrimaryExp | Ident '(' OptionalFuncRParams ')' | UnaryOp UnaryExp ;
OptionalFuncRParams → FuncRParams | ε ;
FuncRParams → Exp ExpListTail ;
ExpListTail → ',' Exp ExpListTail | ε ;
UnaryOp → '+' | '−' | '!' ;
MulExp → UnaryExp MulExp' ;
MulExp' → ('*' | '/' | '%') UnaryExp MulExp' | ε ;
AddExp → MulExp AddExp' ;
AddExp' → ('+' | '−') MulExp AddExp' | ε ;
RelExp → AddExp RelExp' ;
RelExp' → ('<' | '>' | '<=' | '>=') AddExp RelExp' | ε ;
EqExp → RelExp EqExp' ;
EqExp' → ('==' | '!=') RelExp EqExp' | ε ;
LAndExp → EqExp LAndExp' ;
LAndExp' → '&&' EqExp LAndExp' | ε ;
LOrExp → LAndExp LOrExp' ;
LOrExp' → '||' LAndExp LOrExp' | ε ;
ConstExp → AddExp ;


%token # Ident IntConst FloatConst 'const' 'int' 'float' '[' ']' '=' '{' '}' ',' ';' 'void' '(' ')' 'if' 'else' 'while' 'break' 'continue' 'return' '+' '−' '!' '*' '/' '%' '<' '>' '<=' '>=' '==' '!=' '&&' '||' ε
{
CompUnit':CompUnit
CompUnit:Decl CompUnitOpt#|#FuncDef CompUnitOpt
CompUnitOpt:Decl CompUnitOpt#|#FuncDef CompUnitOpt#|#ε
Decl:ConstDecl#|#VarDecl
ConstDecl:'const' BType ConstDef ConstDeclRest ';'
ConstDeclRest:ε#|#',' ConstDef ConstDeclRest
BType:'int'#|#'float'
ConstDef:Ident ConstDefArray '=' ConstInitVal
ConstDefArray:ε#|#'[' ConstExp ']' ConstDefArray
ConstInitVal:ConstExp#|#'{' ConstInitValList '}'
ConstInitValList:ε#|#ConstInitVal ConstInitValListRest
ConstInitValListRest:ε#|#',' ConstInitVal ConstInitValListRest
VarDecl:BType VarDef VarDeclRest ';'
VarDeclRest:ε#|#',' VarDef VarDeclRest
VarDef:Ident VarDefArray#|#Ident VarDefArray '=' InitVal
VarDefArray:ε#|#'[' ConstExp ']' VarDefArray
InitVal:Exp#|#'{' InitValList '}'
InitValList:ε#|#InitVal InitValListRest
InitValListRest:ε#|#',' InitVal InitValListRest
FuncDef:FuncType Ident '(' FuncFParams ')' Block
FuncType:'void'#|#'int'#|#'float'
FuncFParams:ε#|#FuncFParam FuncFParamsRest
FuncFParamsRest:ε#|#',' FuncFParam FuncFParamsRest
FuncFParam:BType Ident FuncFParamArray
FuncFParamArray:ε#|#'[' ']' FuncFParamArrayExp
FuncFParamArrayExp:ε#|#'[' Exp ']' FuncFParamArrayExp
Block:'{' BlockItems '}'
BlockItems:ε#|#BlockItem BlockItems
BlockItem:Decl#|#Stmt
Stmt:LVal '=' Exp ';'#|#ExpOpt ';'#|#Block#|#'if' '(' Cond ')' Stmt StmtElse#|#'while' '(' Cond ')' Stmt#|#'break' ';'#|#'continue' ';'#|#'return' ExpOpt ';'
ExpOpt:ε#|#Exp
StmtElse:ε#|#'else' Stmt
Exp:AddExp
Cond:LOrExp
LVal:Ident LValArray
LValArray:ε#|#'[' Exp ']' LValArray
PrimaryExp:'(' Exp ')'#|#LVal#|#Number
Number:IntConst#|#FloatConst
UnaryExp:PrimaryExp#|#Ident '(' FuncRParams ')'#|#UnaryOp UnaryExp
UnaryOp:'+'#|#'−'#|#'!'
FuncRParams:ε#|#Exp FuncRParamsRest
FuncRParamsRest:ε#|#',' Exp FuncRParamsRest
MulExp:UnaryExp MulExpRest
MulExpRest:ε#|#MulOp UnaryExp MulExpRest
MulOp:'*'#|#'/'#|#'%'
AddExp:MulExp AddExpRest
AddExpRest:ε#|#AddOp MulExp AddExpRest
AddOp:'+'#|#'−'
RelExp:AddExp RelExpRest
RelExpRest:ε#|#RelOp AddExp RelExpRest
RelOp:'<'#|#'>'#|#'<='#|#'>='
EqExp:RelExp EqExpRest
EqExpRest:ε#|#EqOp RelExp EqExpRest
EqOp:'=='#|#'!='
LAndExp:EqExp LAndExpRest
LAndExpRest:ε#|#'&&' EqExp LAndExpRest
LOrExp:LAndExp LOrExpRest
LOrExpRest:ε#|#'||' LAndExp LOrExpRest
ConstExp:AddExp
}